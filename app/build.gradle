apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.protobuf'

ext {
    protobufLite = '3.12.0'
}

android {
    compileSdkVersion 29
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.bilibili.bililive.tests"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        ndk {
            moduleName "hello"
            abiFilters 'armeabi-v7a','x86'
        }
    }
    sourceSets {
        main {
            java {
                java.srcDirs += 'src/main/kotlin'
            }
        }
        main.proto.srcDirs = ['src/main/proto']
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    lintOptions {
        //设置只检查的类型
        def checkList = [
                'SerializableClassCheck',
                'HandleExceptionCheck',
                'AvoidUsageApiCheck',
                'DependencyApiCheck',
                'ResourceNameCheck'
        ] as String[]
        abortOnError false
    }

    packagingOptions {
        pickFirst '**/libc++_shared.so'
    }
    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }

}

dependencies {
    implementation 'com.google.android.material:material:1.2.1'
    ext.anko_version='0.10.8'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$ktx_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$ktx_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$ktx_version"

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.4'

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
//    api 'com.google.dagger:dagger:2.29.1'
//    annotationProcessor 'com.google.dagger:dagger-compiler:2.29.1'

//    implementation 'com.github.sanyuankexie.Flexml:litho:0.3.2'
    implementation 'com.alibaba:fastjson:1.1.72.android'
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.didi.hummer:hummer:0.3.15'

    implementation "org.jetbrains.anko:anko-commons:$anko_version"
//    implementation 'com.github.ctiao:DanmakuFlameMaster:0.9.25'

//    implementation "com.google.protobuf:protobuf-lite:$protobufLite"

    implementation project(":mylibrary")
}

//protobuf {
//    // Configure the protoc executable
//    protoc {
//        // Download from repositories
//        artifact = "com.google.protobuf:protoc:$protobufLite"
//        // or using local protoc
//        // path = '/usr/local/bin/protoc'
//    }
//    plugins {
//        lite {
//            // The codegen for lite comes as a separate artifact
//            artifact = "com.google.protobuf:protoc-gen-javalite:$protobufLite"
//        }
//    }
//    generateProtoTasks {
//        all().each { task ->
//            task.builtins {
//                // In most cases you don't need the full Java output
//                // if you use the lite output.
//                remove java
//            }
//            task.plugins {
//                lite {
//                    // copy to src dir when ready
//                    outputSubDir = 'tmp'
//                }
//            }
//        }
//    }
//    // generatedFilesBaseDir = "$projectDir/src/"
//}
