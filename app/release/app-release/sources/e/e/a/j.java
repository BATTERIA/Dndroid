package e.e.a;

import android.text.TextUtils;
import com.didi.hummer.render.style.HummerLayout;
import e.c.a.b.l;
import e.e.a.o.e.c;
import e.e.a.o.h.e;
import e.e.a.o.h.f;
import e.e.a.o.i.g;
import e.e.a.o.l.k;
import e.e.a.o.l.t;
import e.e.a.o.q.h;
import e.e.a.p.b;
import e.e.a.r.e.p;
import e.e.a.s.d;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class j {

    /* renamed from: a  reason: collision with root package name */
    public b f4309a;
    public AtomicBoolean b = new AtomicBoolean(false);

    /* renamed from: c  reason: collision with root package name */
    public d f4310c;

    /* renamed from: d  reason: collision with root package name */
    public a f4311d;

    public interface a {
    }

    public j(HummerLayout hummerLayout, String str) {
        l.f.a("HummerNative", "HummerContext.createContext");
        long currentTimeMillis = System.currentTimeMillis();
        e.e.a.p.d.a aVar = new e.e.a.p.d.a(hummerLayout, str);
        aVar.a(new e.e.a.o.g.a());
        aVar.a(new e.e.a.o.j.a());
        aVar.a(new f());
        aVar.a(new e());
        aVar.a(new e.e.a.o.m.a());
        aVar.a(new h());
        aVar.a(new e.e.a.o.o.a());
        aVar.a(new e.e.a.o.f.d());
        aVar.a(new c());
        aVar.a(new g());
        aVar.a(new e.e.a.o.p.a());
        aVar.a(new e.e.a.o.d.a());
        aVar.a(new e.e.a.o.n.g());
        aVar.a(new t());
        aVar.a(new k());
        aVar.a("var Image = class Image extends Base {\n    constructor(...args) {\n        super('Image', ...args);\n    }\n    set src(arg) {\n        this._src = arg;\n        arg = transSingleArg(arg);\n        invoke('Image', this.objID, 'setSrc', arg);\n    }\n    get src() {\n        return this._src;\n    }\n    set gifSrc(arg) {\n        this._gifSrc = arg;\n        arg = transSingleArg(arg);\n        invoke('Image', this.objID, 'setGifSrc', arg);\n    }\n    get gifSrc() {\n        return this._gifSrc;\n    }\n    set gifRepeatCount(arg) {\n        this._gifRepeatCount = arg;\n        arg = transSingleArg(arg);\n        invoke('Image', this.objID, 'setGifRepeatCount', arg);\n    }\n    get gifRepeatCount() {\n        return this._gifRepeatCount;\n    }\n}\n__GLOBAL__.Image = Image;\nvar Loading = class Loading extends Base {\n    constructor(...args) {\n        super('Loading', ...args);\n    }\n}\n__GLOBAL__.Loading = Loading;\nvar TextArea = class TextArea extends Base {\n    constructor(...args) {\n        super('TextArea', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('TextArea', this.objID, 'setText', arg);\n    }\n    get text() {\n        return invoke('TextArea', this.objID, 'getText');\n    }\n    set placeholder(arg) {\n        this._placeholder = arg;\n        arg = transSingleArg(arg);\n        invoke('TextArea', this.objID, 'setPlaceholder', arg);\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    set focused(arg) {\n        this._focused = arg;\n        arg = transSingleArg(arg);\n        invoke('TextArea', this.objID, 'setFocused', arg);\n    }\n    get focused() {\n        return this._focused;\n    }\n}\n__GLOBAL__.TextArea = TextArea;\nvar Input = class Input extends Base {\n    constructor(...args) {\n        super('Input', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('Input', this.objID, 'setText', arg);\n    }\n    get text() {\n        return invoke('Input', this.objID, 'getText');\n    }\n    set placeholder(arg) {\n        this._placeholder = arg;\n        arg = transSingleArg(arg);\n        invoke('Input', this.objID, 'setPlaceholder', arg);\n    }\n    get placeholder() {\n        return this._placeholder;\n    }\n    set focused(arg) {\n        this._focused = arg;\n        arg = transSingleArg(arg);\n        invoke('Input', this.objID, 'setFocused', arg);\n    }\n    get focused() {\n        return this._focused;\n    }\n}\n__GLOBAL__.Input = Input;\nvar Switch = class Switch extends Base {\n    constructor(...args) {\n        super('Switch', ...args);\n    }\n    set checked(arg) {\n        this._checked = arg;\n        arg = transSingleArg(arg);\n        invoke('Switch', this.objID, 'setChecked', arg);\n    }\n    get checked() {\n        return this._checked;\n    }\n}\n__GLOBAL__.Switch = Switch;\nvar ViewPager = class ViewPager extends Base {\n    constructor(...args) {\n        super('ViewPager', ...args);\n    }\n    set data(arg) {\n        this._data = arg;\n        arg = transSingleArg(arg);\n        invoke('ViewPager', this.objID, 'setData', arg);\n    }\n    get data() {\n        return this._data;\n    }\n    setCurrentItem(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'setCurrentItem', ...args);\n    }\n    onPageChange(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onPageChange', ...args);\n    }\n    onPageScroll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onPageScroll', ...args);\n    }\n    onPageScrollStateChange(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onPageScrollStateChange', ...args);\n    }\n    onItemClick(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onItemClick', ...args);\n    }\n    onItemView(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('ViewPager', this.objID, 'onItemView', ...args);\n    }\n}\n__GLOBAL__.ViewPager = ViewPager;\nvar Toast = class Toast extends Base {\n    constructor(...args) {\n        super('Toast', ...args);\n    }\n    static show(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Toast', 0, 'show', ...args);\n    }\n    static custom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Toast', 0, 'custom', ...args);\n    }\n}\n__GLOBAL__.Toast = Toast;\nvar Dialog = class Dialog extends Base {\n    constructor(...args) {\n        super('Dialog', ...args);\n    }\n    set cancelable(arg) {\n        this._cancelable = arg;\n        arg = transSingleArg(arg);\n        invoke('Dialog', this.objID, 'setCancelable', arg);\n    }\n    get cancelable() {\n        return this._cancelable;\n    }\n    alert(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'alert', ...args);\n    }\n    confirm(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'confirm', ...args);\n    }\n    loading(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'loading', ...args);\n    }\n    custom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'custom', ...args);\n    }\n    dismiss(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Dialog', this.objID, 'dismiss', ...args);\n    }\n}\n__GLOBAL__.Dialog = Dialog;\nvar Button = class Button extends Base {\n    constructor(...args) {\n        super('Button', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('Button', this.objID, 'setText', arg);\n    }\n    get text() {\n        return this._text;\n    }\n    set pressed(arg) {\n        this._pressed = arg;\n        arg = transSingleArg(arg);\n        invoke('Button', this.objID, 'setPressed', arg);\n    }\n    get pressed() {\n        return this._pressed;\n    }\n    set disabled(arg) {\n        this._disabled = arg;\n        arg = transSingleArg(arg);\n        invoke('Button', this.objID, 'setDisabled', arg);\n    }\n    get disabled() {\n        return this._disabled;\n    }\n}\n__GLOBAL__.Button = Button;\nvar List = class List extends Base {\n    constructor(...args) {\n        super('List', ...args);\n    }\n    set refreshView(arg) {\n        this._refreshView = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setRefreshView', arg);\n    }\n    get refreshView() {\n        return this._refreshView;\n    }\n    set loadMoreView(arg) {\n        this._loadMoreView = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setLoadMoreView', arg);\n    }\n    get loadMoreView() {\n        return this._loadMoreView;\n    }\n    set onRefresh(arg) {\n        this._onRefresh = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnRefresh', arg);\n    }\n    get onRefresh() {\n        return this._onRefresh;\n    }\n    set onLoadMore(arg) {\n        this._onLoadMore = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnLoadMore', arg);\n    }\n    get onLoadMore() {\n        return this._onLoadMore;\n    }\n    set onRegister(arg) {\n        this._onRegister = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnRegister', arg);\n    }\n    get onRegister() {\n        return this._onRegister;\n    }\n    set onCreate(arg) {\n        this._onCreate = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnCreate', arg);\n    }\n    get onCreate() {\n        return this._onCreate;\n    }\n    set onUpdate(arg) {\n        this._onUpdate = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setOnUpdate', arg);\n    }\n    get onUpdate() {\n        return this._onUpdate;\n    }\n    set showScrollBar(arg) {\n        this._showScrollBar = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setShowScrollBar', arg);\n    }\n    get showScrollBar() {\n        return this._showScrollBar;\n    }\n    set bounces(arg) {\n        this._bounces = arg;\n        arg = transSingleArg(arg);\n        invoke('List', this.objID, 'setBounces', arg);\n    }\n    get bounces() {\n        return this._bounces;\n    }\n    refresh(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'refresh', ...args);\n    }\n    stopPullRefresh(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'stopPullRefresh', ...args);\n    }\n    stopLoadMore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'stopLoadMore', ...args);\n    }\n    scrollTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'scrollTo', ...args);\n    }\n    scrollBy(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'scrollBy', ...args);\n    }\n    scrollToPosition(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('List', this.objID, 'scrollToPosition', ...args);\n    }\n}\n__GLOBAL__.List = List;\nvar View = class View extends Base {\n    constructor(...args) {\n        super('View', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('View', this.objID, 'getElementById', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'layout', ...args);\n    }\n    empty(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('View', this.objID, 'empty', ...args);\n    }\n}\n__GLOBAL__.View = View;\nvar Anchor = class Anchor extends Base {\n    constructor(...args) {\n        super('Anchor', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('Anchor', this.objID, 'getElementById', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'layout', ...args);\n    }\n    empty(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Anchor', this.objID, 'empty', ...args);\n    }\n}\n__GLOBAL__.Anchor = Anchor;\nvar Text = class Text extends Base {\n    constructor(...args) {\n        super('Text', ...args);\n    }\n    set text(arg) {\n        this._text = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setText', arg);\n    }\n    get text() {\n        return this._text;\n    }\n    set richText(arg) {\n        this._richText = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setRichText', arg);\n    }\n    get richText() {\n        return this._richText;\n    }\n    set formattedText(arg) {\n        this._formattedText = arg;\n        arg = transSingleArg(arg);\n        invoke('Text', this.objID, 'setFormattedText', arg);\n    }\n    get formattedText() {\n        return this._formattedText;\n    }\n}\n__GLOBAL__.Text = Text;\nvar Scroller = class Scroller extends Base {\n    constructor(...args) {\n        super('Scroller', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('Scroller', this.objID, 'getSubview', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'layout', ...args);\n    }\n    set showScrollBar(arg) {\n        this._showScrollBar = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setShowScrollBar', arg);\n    }\n    get showScrollBar() {\n        return this._showScrollBar;\n    }\n    set refreshView(arg) {\n        this._refreshView = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setRefreshView', arg);\n    }\n    get refreshView() {\n        return this._refreshView;\n    }\n    set loadMoreView(arg) {\n        this._loadMoreView = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setLoadMoreView', arg);\n    }\n    get loadMoreView() {\n        return this._loadMoreView;\n    }\n    set onRefresh(arg) {\n        this._onRefresh = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setOnRefresh', arg);\n    }\n    get onRefresh() {\n        return this._onRefresh;\n    }\n    set onLoadMore(arg) {\n        this._onLoadMore = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setOnLoadMore', arg);\n    }\n    get onLoadMore() {\n        return this._onLoadMore;\n    }\n    stopPullRefresh(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'stopPullRefresh', ...args);\n    }\n    stopLoadMore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'stopLoadMore', ...args);\n    }\n    set bounces(arg) {\n        this._bounces = arg;\n        arg = transSingleArg(arg);\n        invoke('Scroller', this.objID, 'setBounces', arg);\n    }\n    get bounces() {\n        return this._bounces;\n    }\n    scrollTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollTo', ...args);\n    }\n    scrollBy(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollBy', ...args);\n    }\n    scrollToTop(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollToTop', ...args);\n    }\n    scrollToBottom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'scrollToBottom', ...args);\n    }\n    setOnScrollToTopListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'setOnScrollToTopListener', ...args);\n    }\n    setOnScrollToBottomListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'setOnScrollToBottomListener', ...args);\n    }\n    updateContentSize(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('Scroller', this.objID, 'updateContentSize', ...args);\n    }\n}\n__GLOBAL__.Scroller = Scroller;\nvar HorizontalScroller = class HorizontalScroller extends Base {\n    constructor(...args) {\n        super('HorizontalScroller', ...args);\n    }\n    appendChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'appendChild', ...args);\n    }\n    removeChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'removeChild', ...args);\n    }\n    removeAll(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'removeAll', ...args);\n    }\n    insertBefore(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'insertBefore', ...args);\n    }\n    replaceChild(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'replaceChild', ...args);\n    }\n    getElementById(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        return invoke('HorizontalScroller', this.objID, 'getSubview', ...args);\n    }\n    layout(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'layout', ...args);\n    }\n    set showScrollBar(arg) {\n        this._showScrollBar = arg;\n        arg = transSingleArg(arg);\n        invoke('HorizontalScroller', this.objID, 'setShowScrollBar', arg);\n    }\n    get showScrollBar() {\n        return this._showScrollBar;\n    }\n    set bounces(arg) {\n        this._bounces = arg;\n        arg = transSingleArg(arg);\n        invoke('HorizontalScroller', this.objID, 'setBounces', arg);\n    }\n    get bounces() {\n        return this._bounces;\n    }\n    scrollTo(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollTo', ...args);\n    }\n    scrollBy(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollBy', ...args);\n    }\n    scrollToTop(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollToTop', ...args);\n    }\n    scrollToBottom(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'scrollToBottom', ...args);\n    }\n    setOnScrollToTopListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'setOnScrollToTopListener', ...args);\n    }\n    setOnScrollToBottomListener(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'setOnScrollToBottomListener', ...args);\n    }\n    updateContentSize(...args) {\n        let stash = args;\n        args = transArgs(...args);\n        invoke('HorizontalScroller', this.objID, 'updateContentSize', ...args);\n    }\n}\n__GLOBAL__.HorizontalScroller = HorizontalScroller;\n", "hummer_component.js");
        e.e.a.a0.d.a(str, "HummerContext.createContext", (Map<String, Object>) null, currentTimeMillis);
        this.f4309a = aVar;
        if (e.e.a.q.d.b.f4498a) {
            new p(aVar).setParameterInjector(null);
        }
    }

    public /* synthetic */ void a(String str, e.e.a.n.a.b bVar) {
        if (this.b.get()) {
            a aVar = this.f4311d;
            if (aVar != null) {
                new RuntimeException("Page is destroyed!");
                if (((f) aVar).f4293a == null) {
                    throw null;
                }
            }
        } else if (bVar == null) {
            a aVar2 = this.f4311d;
            if (aVar2 != null) {
                new RuntimeException("Http response is empty!");
                if (((f) aVar2).f4293a == null) {
                    throw null;
                }
            }
        } else if (bVar.f4316e.f4317c != 0) {
            a aVar3 = this.f4311d;
            if (aVar3 != null) {
                new RuntimeException(String.format("Http response error: %d, %s", Integer.valueOf(bVar.f4316e.f4317c), bVar.f4316e.f4318d));
                if (((f) aVar3).f4293a == null) {
                    throw null;
                }
            }
        } else {
            a(bVar.f4315d, str);
        }
    }

    public void a(String str, String str2) {
        if (!TextUtils.isEmpty(str) && !this.b.get()) {
            b bVar = this.f4309a;
            bVar.i = str2;
            bVar.a(str, str2);
            a aVar = this.f4311d;
            if (aVar == null) {
                return;
            }
            if (this.f4309a.f4447h == null) {
                new RuntimeException("Page is empty!");
                if (((f) aVar).f4293a == null) {
                    throw null;
                }
            } else if (((f) aVar).f4293a == null) {
                throw null;
            }
        }
    }
}
